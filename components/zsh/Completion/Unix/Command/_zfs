#compdef zfs
# Synced with the Nevada build 131 man page

_zfs() {
	local context state line expl
	typeset -A opt_args
	local -a subcmds rw_properties rw_propnames ro_properties create_properties

	subcmds=(
		"create" "destroy" "clone" "promote" "rename" "snapshot"
		"rollback" "list" "set" "get" "inherit" "mount" "unmount"
		"share" "unshare" "send" "receive" "allow" "unallow"
		"upgrade" "userspace" "groupspace" "hold" "holds" "release"
	)

	# TODO: userused@ and groupused@ could have more extensive handling
	ro_properties=(
		"name" "type" "creation" "used" "available" "referenced"
		"compressratio" "mounted" "origin" "usedbychildren"
		"usedbydataset" "usedbyrefreservation" "usedbysnapshots"
		"defer_destroy" "userused@" "userrefs" "groupused@"
	)

	# TODO: Be cleverer about what values can be set.  Is there any way to
	# set the sorting for *size properties to false by default?
	rw_properties=(
		"aclinherit:value:(discard noallow restricted passthrough passthrough-x)"
		"aclmode:value:(discard groupmask passthrough)"
		"atime:value:(on off)"
		"canmount:value:(on off noauto)"
		"checksum:value:(on off fletcher2 fletcher4 sha256)"
		"compression:value:(on off lzjb gzip gzip-{1..9} zle)"
		"copies:value:(1 2 3)"
		"dedup:value:(on off verify sha256 sha256,verify)"
		"devices:value:(on off)"
		"exec:value:(on off)"
		"groupquota@:value:" # TODO: complete group=size|none
		"logbias:value:(latency throughput)"
		"mlslabel:value:(none)" # TODO: list sensitivity labels
		"mountpoint:path, 'legacy', or 'none':{if [[ -prefix /* ]]; then _path_files -/; else _wanted mountpoints expl 'mountpoint (type \"/\" to start completing paths)' compadd legacy none; fi}"
		"nbmand:value:(on off)"
		"primarycache:value:(all none metadata)"
		"quota:number or 'none':{if [[ -prefix [0-9]## ]]; then _message -e 'number'; elif [[ $PREFIX == quota= ]]; then _wanted none expl 'number or none' compadd none; else _wanted none expl 'quota' compadd none; fi}"
		"readonly:value:(on off)"
		"recordsize:value:(512 1K 2K 4K 8K 16K 32K 64K 128K)"
		"refquota:number or 'none':{if [[ -prefix [0-9]## ]]; then _message -e 'number'; elif [[ $PREFIX == refquota= ]]; then _wanted none expl 'number or none' compadd none; else _wanted none expl 'refquota' compadd none; fi}"
		"refreservation:number or 'none':{if [[ -prefix [0-9]## ]]; then _message -e 'number'; elif [[ $PREFIX == refreservation= ]]; then _wanted none expl 'number or none' compadd none; else _wanted none expl 'refreservation' compadd none; fi}"
		"reservation:value:{if [[ -prefix [0-9]## ]]; then _message -e 'number'; elif [[ $PREFIX == reservation= ]]; then _wanted none expl 'number or none' compadd none; else _wanted none expl 'reservation' compadd none; fi}"
		"secondarycache:value:(all none metadata)"
		"setuid:value:(on off)"
		"shareiscsi:value:(on off type=disk)"
		"sharenfs:value:(on off)" # or share(1M) options
		"sharesmb:value:(on off)" # or sharemgr(1M) options
		"snapdir:value:(hidden visible)"
		"userquota@:value:" # TODO: complete user=size|none
		"version:value:(1 2 current)"
		"volsize:value:" # <size>
		"vscan:value:(on off)"
		"xattr:value:(on off)"
		"zoned:value:(on off)"
	)

	create_properties=(
		$rw_properties
		"casesensitivity:value:(sensitive insensitive mixed)"
		"normalization:value:(none formC formD formKC formKD)"
		"utf8only:value:(on off)"
		"volblocksize:value:(512 1K 2K 4K 8K 16K 32K 64K 128K)"
	)

	delegatable_perms=(
		"allow" "clone" "create" "destroy" "mount" "promote"
		"receive" "rename" "rollback" "send" "share" "snapshot"
		${create_properties%%:*}
	)

	rw_propnames=( ${rw_properties%%:*} )

	if [[ $service == "zfs" ]]; then
		_arguments -C -A "-*" \
			'-\?[Help]' \
			'*::command:->subcmd' && return 0

		if (( CURRENT == 1 )); then
			_wanted commands expl "zfs subcommand" compadd -a subcmds
			return
		fi
		service="$words[1]"
		curcontext="${curcontext%:*}=$service:"
	fi

	case $service in
	("create")
		_arguments -A "-*" \
			'-p[Create parent datasets]' \
			'-o[Set initial properties]:property:_values -s , "property" $create_properties' \
			- set1 \
			':filesystem:' \
			- set2 \
			'-s[Create sparse volume]' \
			'-b[Set volblocksize]:blocksize:' \
			'-V[Set size]:size:' \
			':volume:'
		;;

	("destroy")
		_arguments -A "-*" \
			'-r[Recursively destroy all children]' \
			'-R[Recursively destroy all dependents]' \
			- set1 \
			'-d[delete or mark deferred]' \
			':snapshot:_zfs_dataset -t snap' \
			- set2 \
			'-f[Force unmounts]' \
			':filesystem/volume/snapshot:_zfs_dataset -t fs -t vol'
		;;

	("snapshot")
		_arguments -A "-*" \
			'-r[Recursively snapshot all descendant datasets]' \
			'-o[Set property]:property:_values -s , "property" $create_properties' \
			':filesystem/volume:_zfs_dataset -t fs -t vol -S@'
		;;

	("rollback")
		_arguments -A "-*" \
			'-r[Recursively destroy more recent snapshots]' \
			'-R[Recursively destroy more recent snapshots and clones]' \
			'-f[Force unmounts]' \
			':snapshot:_zfs_dataset -t snap'
		;;

	("clone")
		# XXX needs to bail if there are no snapshots
		_arguments -A "-*" \
			'-p[Create parent datasets]' \
			'-o[Set property]:property:_values -s , "property" $create_properties' \
			':snapshot:_zfs_dataset -t snap' \
			':filesystem/volume:'
		;;

	("promote")
		# XXX complete only cloned filesystems
		_arguments \
			':filesystem:_zfs_dataset -t fs' \
		;;

	("rename")
		_arguments -A "-*" \
			- set1 \
			'-p[Create parent datasets]' \
			':filesystem/volume/snapshot:_zfs_dataset' \
			':filesystem/volume/snapshot:' \
			- set2 \
			'-r[Recursively rename snapshots of all descendent datasets]' \
			':snapshot:_zfs_dataset -t snap' \
			':snapshot:'
		;;

	("list")
		_arguments -A "-*" \
			'-r[Recursively display children]' \
			'-H[Scripting mode]' \
			'-d[Depth]:value:' \
			'-o[Properties to list]:property:_values -s , "property" $ro_properties $rw_propnames' \
			'*-s[Sort key (ascending)]:property:_values "property" $ro_properties $rw_propnames' \
			'*-S[Sort key (descending)]:property:_values "property" $ro_properties $rw_propnames' \
			'-t[Dataset types to list]:dataset type:_values -s , "dataset type" filesystem snapshot volume' \
			'*:filesystem/volume/snapshot:_zfs_dataset'
		;;

	("set")
		_arguments \
			':property:_values -s , "property" $rw_properties' \
			'*:filesystem/volume:_zfs_dataset -t fs -t vol'
		;;

	("get")
		_arguments -A "-*" \
			"-r[Recursively display children's properties]" \
			'-d[Depth]:value:' \
			'-H[Scripting mode]' \
			'-p[Display numbers exactly]' \
			'-s[Specify sources]:source:_values -s , "source" local default inherited temporary none' \
			'-o[Specify fields]:field:_values -s , "field" name property value source' \
			':property:_values -s , "property" $ro_properties $rw_propnames all' \
			'*:filesystem/volume/snapshot:_zfs_dataset'
		;;

	("inherit")
		_arguments -A "-*" \
			'-r[Recursively inherit property for all children]' \
			'-S[Revert to received property value]' \
			':property:_values -s , "property" $ro_properties $rw_properties' \
			'*:filesystem/volume:_zfs_dataset -t fs -t vol'
		;;

	("userspace"|"groupspace")
		_arguments -A "-*" \
			'-n[Print numeric ID]' \
			'-i[Translate SID to POSIX ID]' \
			'-H[Tab-delimited output with no headers]' \
			'-p[Parseable mode]' \
			'-o[Properties to list]:property:_values -s , "property" type name used quota' \
			'*-s[Sort key (ascending)]:property:_values "property" type name used quota' \
			'*-S[Sort key (descending)]:property:_values "property" type name used quota' \
			'-t[Types to list]:type:_values -s , "type" all posixuser smbuser posixgroup smbgroup' \
			'*:filesystem/volume/snapshot:_zfs_dataset'
		;;

	("mount")
		_arguments -A "-*" \
			'-o[Mount options]:mount options:_values -s , "option" {,no}{devices,exec,setuid} ro rw' \
			'-O[Overlay mount]' \
			'-v[Report mount progress]' \
			- set1 \
			':filesystem:_zfs_dataset -t fs' \
			- set2 \
			'-a[Mount all available ZFS filesystems]'
		;;

	("unmount")
		_arguments -A "-*" \
			- set1 \
			'-f[Force unmount]' \
			':filesystem:_zfs_dataset -t fs -t mtpt' \
			- set2 \
			'-a[Unmount all ZFS filesystems]'
		;;

	("share")
		_arguments -A "-*" \
			- set1 \
			'-a[Share all available ZFS filesystems]' \
			- set2 \
			':filesystem:_zfs_dataset -t fs'
		;;

	("unshare")
		_arguments -A "-*" \
			- set1 \
			'-a[Unshare all shared ZFS filesystems]' \
			- set2 \
			':filesystem:_zfs_dataset -t fs -t mtpt'
		;;

	("send")
		_arguments -A "-*" \
			'-i[Generate an incremental stream]:snapshot:_zfs_dataset -t snap' \
			'-D[Perform dedup processing]' \
			'-I[Generate an incremental stream with intermediary snapshots]:snapshot:_zfs_dataset -t snap' \
			'-p[Send properties]' \
			'-R[Generate a replication stream package]' \
			'-v[Verbose]' \
			':snapshot:_zfs_dataset -t snap'
		;;

	("receive")
		_arguments -A "-*" \
			'-v[Verbose]' \
			'-n[Do not receive the stream]' \
			'-F[Force a rollback if necessary]' \
			'-u[Filesystem is not mounted]' \
			- set1 \
			':filesystem/volume/snapshot:_zfs_dataset' \
			- set2 \
			'-d[Set path prefix]:filesystem:_zfs_dataset -t fs'
		;;

	("allow")
		_arguments -A "-*" \
			- set1 \
			':filesystem/volume:_zfs_dataset -t fs -t vol' \
			- set2 \
			'(-g)-u[User]:user:_users' \
			'(-u)-g[Group]:group:_groups' \
			'-l[Allow for named dataset]' \
			'-d[Allow for descendent datasets]' \
			':permissions or sets:_values -s , "permission or set" $delegatable_perms' \
			':filesystem/volume:_zfs_dataset -t fs -t vol' \
			- set3 \
			'-e[Everyone]' \
			'-l[Allow for named dataset]' \
			'-d[Allow for descendent datasets]' \
			':permissions or sets:_values -s , "permission or set" $delegatable_perms' \
			':filesystem/volume:_zfs_dataset -t fs -t vol' \
			- set4 \
			'-c[Create-time permissions]' \
			':permissions or sets:_values -s , "permission or set" $delegatable_perms' \
			':filesystem/volume:_zfs_dataset -t fs -t vol' \
			- set5 \
			'-s[Define or modify permission sets]' \
			':setname:' \
			':permissions or sets:_values -s , "permission or set" $delegatable_perms' \
			':filesystem/volume:_zfs_dataset -t fs -t vol'
		;;

	("unallow")
		_arguments -A "-*" \
			'-r[Recursive removal]' \
			- set1 \
			'-s[Remove permissions from or delete a permission set]:permission set:' \
			':permissions or sets:_values -s , "permission or set" $delegatable_perms' \
			':filesystem/volume:_zfs_dataset -t fs -t vol' \
			- set2 \
			'(-g)-u[User]:user:_users' \
			'(-u)-g[Group]:group:_groups' \
			'-l[Allow for named dataset]' \
			'-d[Allow for descendent datasets]' \
			':permissions or sets:_values -s , "permission or set" $delegatable_perms' \
			':filesystem/volume:_zfs_dataset -t fs -t vol' \
			- set3 \
			'-e[Everyone]' \
			'-l[Allow for named dataset]' \
			'-d[Allow for descendent datasets]' \
			':permissions or sets:_values -s , "permission or set" $delegatable_perms' \
			':filesystem/volume:_zfs_dataset -t fs -t vol' \
			- set4 \
			'-c[Create-time permissions]' \
			':permissions or sets:_values -s , "permission or set" $delegatable_perms' \
			':filesystem/volume:_zfs_dataset -t fs -t vol'
		;;

	("upgrade")
		_arguments -A "-*" \
			- set1 \
			'-v[Verbose]' \
			- set2 \
			'-a[Upgrade all filesystems on all pools]' \
			'-r[Upgrade descendent filesystems, too]' \
			'-V[Upgrade to specified version]:version:(1 2)' \
			- set3 \
			'-r[Upgrade descendent filesystems, too]' \
			'-V[Upgrade to specified version]:version:(1 2)' \
			':filesystem:_zfs_dataset -t fs'
		;;

	("hold")
		_arguments -A "-*" \
			'-r[Apply hold recursively]' \
			':tag:' \
			':snapshot:_zfs_dataset -t snap'
		;;

	("holds")
		_arguments -A "-*" \
			'-r[List holds recursively]' \
			':snapshot:_zfs_dataset -t snap'
		;;

	("release")
		_arguments -A "-*" \
			'-r[Release holds recursively]' \
			':tag:' \
			':snapshot:_zfs_dataset -t snap'
		;;

	(*)
		_message "unknown zfs subcommand: $service"
		;;
	esac
}

_zfs "$@"
